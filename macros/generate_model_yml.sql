{% macro generate_from_dictionary_model_yml(database_name='default', version_name='default', apply_filter='') %}

    {% set sources_yaml=[] %}

    {% if database_name=='default' %}
        {% set database_name = var('dictionary_database', target.database) %}
    {% endif %}
    {% if version_name=='default' %}
        {% set version_name = var('dictionary_database_version', 'default') %}
    {% endif %}

    {% set header %}
#
#   This file was originally generated by the macro generate_from_dictionary_model_yml and is now under manual control. Replacing with a regenerated file will lose changes!!
#

version: 2

models:
   {%- endset -%}
   {% do sources_yaml.append(header | string | replace('(*', '{%') | replace('*)', '%}') | replace('[[', '{{') | replace(']]', '}}') ) %}
    
    {% set query %}
    	select DISTINCT dd.stage_table_name, dd.stage_column_name, dd.column_order, dd.stage_column_description, t.tests_list
        from raw.internal.data_dictionary dd
        left outer join {{ref('fannie_sflpd_tests')}} t on t.category='test' and dd.database_name=t.database_name and dd.version_name=t.version_name and dd.stage_table_name=t.table_name
        where 
            dd.database_name='{{database_name}}' and dd.version_name='{{version_name}}' 
            {{ apply_filter }}
	    order by dd.stage_table_name, dd.column_order
    {% endset %}
    {% set rowset=run_query(query) %}

    {% set ns = namespace(last_table_name = 'NOT SET') %}
    {% for col in rowset %}
        {% if ns.last_table_name != col.STAGE_TABLE_NAME | string %}
            {% do sources_yaml.append('  - name: ' ~ col.STAGE_TABLE_NAME | lower ) %}
            {% do sources_yaml.append('    columns:') %}
            {% set ns.last_table_name = col.STAGE_TABLE_NAME | string %}
        {%endif %}

        {% do sources_yaml.append('      - name: ' ~ col.STAGE_COLUMN_NAME | lower) %}
        {% do sources_yaml.append('        description: \'{{ doc("' ~ database_name ~ '_' ~ col.STAGE_TABLE_NAME ~ '_' ~ col.STAGE_COLUMN_NAME ~ '_stage_description' ~ '") }}\'' ) %}
        
    {% endfor %} 

    {% set joined = sources_yaml | join ('\n') %}
    {{ log(joined, info=True) }}
    {% do return(joined) %}

{% endmacro %}
